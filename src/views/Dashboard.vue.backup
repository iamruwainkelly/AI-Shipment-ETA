<template>
  <div class="space-y-8">
    <!-- Page Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-white mb-2">Dashboard</h1>
        <p class="text-gray-400">Real-time insights and predictive analytics</p>
      </div>
      <div class="flex items-center space-x-4">
        <!-- Date Filter -->
        <select 
          v-model="selectedTimeframe" 
          @change="updateCharts"
          class="bg-[#1e1e1e] border border-gray-600 text-white px-4 py-2 rounded-lg focus:ring-2 focus:ring-blue-500"
        >
          <option value="7d">Last 7 Days</option>
          <option value="30d">Last 30 Days</option>
          <option value="90d">Last 3 Months</option>
          <option value="1y">Last Year</option>
        </select>
        <!-- Refresh Button -->
        <button 
          @click="refreshData" 
          :disabled="loading"
          class="bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
        >
          <RefreshCw :class="{ 'animate-spin': loading }" class="h-4 w-4" />
          <span>Refresh</span>
        </button>
      </div>
    </div>

    <!-- KPI Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
      <div class="bg-[#1f1f1f] border border-gray-700 p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-400 mb-1">Total Shipments</p>
            <p class="text-2xl font-bold text-white">{{ formatNumber(stats.total) }}</p>
            <p class="text-xs text-green-400 mt-1">â†— +12% from last month</p>
          </div>
          <div class="p-3 bg-blue-500/20 rounded-lg">
            <Package class="h-6 w-6 text-blue-400" />
          </div>
        </div>
      </div>

      <div class="bg-[#1f1f1f] border border-gray-700 p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-400 mb-1">In Transit</p>
            <p class="text-2xl font-bold text-white">{{ formatNumber(stats.inTransit) }}</p>
            <p class="text-xs text-blue-400 mt-1">{{ ((stats.inTransit / stats.total) * 100).toFixed(1) }}% of total</p>
          </div>
          <div class="p-3 bg-blue-500/20 rounded-lg">
            <Truck class="h-6 w-6 text-blue-400" />
          </div>
        </div>
      </div>

      <div class="bg-[#1f1f1f] border border-gray-700 p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-400 mb-1">At Risk</p>
            <p class="text-2xl font-bold text-yellow-400">{{ formatNumber(stats.atRisk) }}</p>
            <p class="text-xs text-yellow-400 mt-1">Delayed shipments</p>
          </div>
          <div class="p-3 bg-yellow-500/20 rounded-lg">
            <AlertTriangle class="h-6 w-6 text-yellow-400" />
          </div>
        </div>
      </div>

      <div class="bg-[#1f1f1f] border border-gray-700 p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-400 mb-1">Delivered</p>
            <p class="text-2xl font-bold text-green-400">{{ formatNumber(stats.delivered) }}</p>
            <p class="text-xs text-green-400 mt-1">{{ ((stats.delivered / stats.total) * 100).toFixed(1) }}% success rate</p>
          </div>
          <div class="p-3 bg-green-500/20 rounded-lg">
            <CheckCircle class="h-6 w-6 text-green-400" />
          </div>
        </div>
      </div>

      <div class="bg-[#1f1f1f] border border-gray-700 p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-400 mb-1">AI Accuracy</p>
            <p class="text-2xl font-bold text-purple-400">{{ stats.aiAccuracy }}%</p>
            <p class="text-xs text-purple-400 mt-1">ETA predictions</p>
          </div>
          <div class="p-3 bg-purple-500/20 rounded-lg">
            <Brain class="h-6 w-6 text-purple-400" />
          </div>
        </div>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Revenue Trend Chart -->
      <div class="bg-[#1a1a1a] border border-gray-700 p-6 rounded-lg shadow-lg">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-semibold text-white flex items-center">
            <TrendingUp class="h-5 w-5 mr-2 text-blue-400" />
            Revenue Trend
          </h2>
          <div class="text-sm text-gray-400">
            Last {{ selectedTimeframe === '7d' ? '7 days' : selectedTimeframe === '30d' ? '30 days' : selectedTimeframe === '90d' ? '3 months' : 'year' }}
          </div>
        </div>
        <div class="h-80">
          <canvas ref="lineChart" class="w-full h-full"></canvas>
        </div>
      </div>

      <!-- Transport Mode Distribution -->
      <div class="bg-[#1a1a1a] border border-gray-700 p-6 rounded-lg shadow-lg">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-semibold text-white flex items-center">
            <PieChart class="h-5 w-5 mr-2 text-green-400" />
            Transport Mode Split
          </h2>
        </div>
        <div class="h-80">
          <canvas ref="pieChart" class="w-full h-full"></canvas>
        </div>
      </div>
    </div>

    <!-- Delivery Performance Chart -->
    <div class="bg-[#1a1a1a] border border-gray-700 p-6 rounded-lg shadow-lg">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-lg font-semibold text-white flex items-center">
          <BarChart3 class="h-5 w-5 mr-2 text-purple-400" />
          Delivery Performance
        </h2>
      </div>
      <div class="h-80">
        <canvas ref="barChart" class="w-full h-full"></canvas>
      </div>
    </div>

    <!-- Recent Activity -->
    <div class="bg-[#1a1a1a] border border-gray-700 p-6 rounded-lg shadow-lg">
      <h2 class="text-lg font-semibold text-white mb-4 flex items-center">
        <Activity class="h-5 w-5 mr-2 text-gray-400" />
        Recent Activity
      </h2>
      <div class="space-y-4">
        <div v-for="activity in recentActivities" :key="activity.id" class="flex items-center space-x-4 p-3 bg-[#0f1419] rounded-lg">
          <div class="h-8 w-8 bg-blue-500/20 rounded-full flex items-center justify-center">
            <component :is="getActivityIcon(activity.type)" class="h-4 w-4 text-blue-400" />
          </div>
          <div class="flex-1">
            <p class="text-sm text-white">{{ activity.message }}</p>
            <p class="text-xs text-gray-400">{{ formatRelativeTime(activity.timestamp) }}</p>
          </div>
        </div>
      </div>
    </div>
  </div>

      <div class="bg-[#1f1f1f] p-6 rounded-lg border border-gray-800 hover:border-[#8b5cf6] transition-all duration-300 transform hover:scale-105">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-gray-400 text-sm">AI Accuracy</p>
            <p class="text-2xl font-bold text-white">96.8%</p>
            <p class="text-green-400 text-xs mt-1">+1.2% from last month</p>
          </div>
          <div class="text-[#8b5cf6] text-3xl">ðŸ¤–</div>
        </div>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
      <!-- Revenue Trend Chart -->
      <div class="bg-[#1f1f1f] p-6 rounded-lg border border-gray-800">
        <h3 class="text-xl font-semibold text-white mb-4">ðŸ“ˆ Revenue Trend</h3>
        <div class="h-80">
          <canvas ref="revenueChart" class="w-full h-full"></canvas>
        </div>
      </div>

      <!-- Shipment Distribution Chart -->
      <div class="bg-[#1f1f1f] p-6 rounded-lg border border-gray-800">
        <h3 class="text-xl font-semibold text-white mb-4">ðŸš› Shipment Distribution</h3>
        <div class="h-80">
          <canvas ref="shipmentChart" class="w-full h-full"></canvas>
        </div>
      </div>
    </div>

      <!-- Transport Mode Distribution -->
      <div class="bg-[#1f1f1f] p-6 rounded-lg border border-gray-800">
        <h3 class="text-xl font-semibold text-white mb-4">ðŸš› Transport Modes</h3>
        <div class="h-80">
          <Doughnut :data="transportData" :options="doughnutOptions" />
        </div>
      </div>
    </div>

    <!-- Delivery Performance Chart -->
    <div class="bg-[#1f1f1f] p-6 rounded-lg border border-gray-800 mb-8">
      <h3 class="text-xl font-semibold text-white mb-4">ðŸŽ¯ Delivery Performance</h3>
      <div class="h-80">
        <Bar :data="performanceData" :options="barOptions" />
      </div>
    </div>

    <!-- Recent Shipments Table -->
    <div class="bg-[#1f1f1f] p-6 rounded-lg border border-gray-800">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-semibold text-white">ðŸ“‹ Recent Shipments</h3>
        <button class="bg-[#1e88e5] hover:bg-[#1565c0] text-white px-4 py-2 rounded-lg transition-colors duration-200">
          Generate Report
        </button>
      </div>
      
      <div class="overflow-x-auto">
        <table class="w-full text-left">
          <thead>
            <tr class="border-b border-gray-700">
              <th class="pb-3 text-gray-400 font-medium">Tracking ID</th>
              <th class="pb-3 text-gray-400 font-medium">Origin</th>
              <th class="pb-3 text-gray-400 font-medium">Destination</th>
              <th class="pb-3 text-gray-400 font-medium">Status</th>
              <th class="pb-3 text-gray-400 font-medium">ETA</th>
              <th class="pb-3 text-gray-400 font-medium">Confidence</th>
            </tr>
          </thead>
          <tbody class="text-white">
            <tr v-for="shipment in recentShipments" :key="shipment.id" class="border-b border-gray-800 hover:bg-[#2a2a2a] transition-colors duration-200">
              <td class="py-4 font-mono text-[#1e88e5]">{{ shipment.trackingId }}</td>
              <td class="py-4">{{ shipment.origin }}</td>
              <td class="py-4">{{ shipment.destination }}</td>
              <td class="py-4">
                <span :class="getStatusColor(shipment.status)" class="px-2 py-1 rounded-full text-xs font-medium">
                  {{ shipment.status }}
                </span>
              </td>
              <td class="py-4">{{ shipment.eta }}</td>
              <td class="py-4">
                <div class="flex items-center">
                  <div class="w-12 bg-gray-700 rounded-full h-2 mr-2">
                    <div :class="getConfidenceColor(shipment.confidence)" 
                         :style="{ width: shipment.confidence + '%' }" 
                         class="h-2 rounded-full transition-all duration-300"></div>
                  </div>
                  <span class="text-sm">{{ shipment.confidence }}%</span>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, nextTick } from 'vue'
import { 
  Package, 
  Truck, 
  AlertTriangle, 
  CheckCircle, 
  Brain,
  TrendingUp, 
  PieChart, 
  BarChart3,
  Activity,
  RefreshCw,
  Ship,
  Plane
} from 'lucide-vue-next'
import Chart from 'chart.js/auto'

const loading = ref(false)
const selectedTimeframe = ref('30d')

// Charts
const lineChart = ref(null)
const pieChart = ref(null)
const barChart = ref(null)
let lineChartInstance = null
let pieChartInstance = null
let barChartInstance = null

// Stats
const stats = reactive({
  total: 1247,
  inTransit: 89,
  atRisk: 12,
  delivered: 1146,
  aiAccuracy: 94.2
})

// Recent activities
const recentActivities = ref([
  {
    id: 1,
    type: 'shipment',
    message: 'Shipment SH-2024-001 delivered to Cape Town',
    timestamp: new Date(Date.now() - 30 * 60 * 1000)
  },
  {
    id: 2,
    type: 'delay',
    message: 'Shipment SH-2024-002 delayed due to weather conditions',
    timestamp: new Date(Date.now() - 45 * 60 * 1000)
  },
  {
    id: 3,
    type: 'delivery',
    message: 'New shipment SH-2024-003 created for Hamburg route',
    timestamp: new Date(Date.now() - 60 * 60 * 1000)
  }
])

// Utility functions
const formatNumber = (num) => {
  return new Intl.NumberFormat('en-ZA').format(num)
}

const formatRelativeTime = (date) => {
  const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' })
  const diff = Math.floor((date - new Date()) / (1000 * 60))
  return rtf.format(diff, 'minute')
}

const getActivityIcon = (type) => {
  switch (type) {
    case 'shipment': return Package
    case 'delay': return AlertTriangle
    case 'delivery': return CheckCircle
    default: return Activity
  }
}

// Chart creation functions
const createLineChart = () => {
  if (lineChartInstance) {
    lineChartInstance.destroy()
  }

  const ctx = lineChart.value.getContext('2d')
  lineChartInstance = new Chart(ctx, {
    type: 'line',
    data: {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
      datasets: [{
        label: 'Revenue (ZAR)',
        data: [420000, 480000, 510000, 475000, 498000, 549600],
        fill: true,
        backgroundColor: 'rgba(59, 130, 246, 0.1)',
        borderColor: '#3b82f6',
        borderWidth: 2,
        tension: 0.4,
        pointRadius: 4,
        pointHoverRadius: 6
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: {
            color: '#9ca3af'
          }
        }
      },
      scales: {
        x: {
          ticks: { color: '#9ca3af' },
          grid: { color: '#374151' }
        },
        y: {
          ticks: { 
            color: '#9ca3af',
            callback: function(value) {
              return 'R' + new Intl.NumberFormat('en-ZA').format(value)
            }
          },
          grid: { color: '#374151' }
        }
      }
    }
  })
}

const createPieChart = () => {
  if (pieChartInstance) {
    pieChartInstance.destroy()
  }

  const ctx = pieChart.value.getContext('2d')
  pieChartInstance = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['Sea Freight', 'Air Freight', 'Road Transport', 'Rail Transport'],
      datasets: [{
        data: [532, 398, 251, 66],
        backgroundColor: [
          '#3b82f6',
          '#10b981',
          '#8b5cf6',
          '#f59e0b'
        ],
        borderWidth: 0
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            color: '#9ca3af',
            padding: 20
          }
        }
      }
    }
  })
}

const createBarChart = () => {
  if (barChartInstance) {
    barChartInstance.destroy()
  }

  const ctx = barChart.value.getContext('2d')
  barChartInstance = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['On Time', 'Early', 'Delayed', 'In Transit'],
      datasets: [{
        label: 'Shipments',
        data: [891, 255, 89, 12],
        backgroundColor: [
          '#10b981',
          '#3b82f6',
          '#ef4444',
          '#f59e0b'
        ],
        borderRadius: 4
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          ticks: { color: '#9ca3af' },
          grid: { display: false }
        },
        y: {
          ticks: { color: '#9ca3af' },
          grid: { color: '#374151' }
        }
      }
    }
  })
}

const updateCharts = () => {
  nextTick(() => {
    createLineChart()
    createPieChart()
    createBarChart()
  })
}

const refreshData = async () => {
  loading.value = true
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    // Update stats with new data
    stats.total = Math.floor(Math.random() * 200) + 1200
    stats.inTransit = Math.floor(Math.random() * 50) + 70
    stats.atRisk = Math.floor(Math.random() * 20) + 5
    stats.delivered = stats.total - stats.inTransit - stats.atRisk
    updateCharts()
  } catch (error) {
    console.error('Failed to refresh data:', error)
  } finally {
    loading.value = false
  }
}

onMounted(() => {
  nextTick(() => {
    createLineChart()
    createPieChart()
    createBarChart()
  })
})
</script>

<style scoped>
/* Custom chart styling */
canvas {
  background: transparent;
}
</style>